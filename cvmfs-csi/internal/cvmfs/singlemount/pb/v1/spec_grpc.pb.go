// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: spec.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SingleClient is the client API for Single service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SingleClient interface {
	// Mounts a single CVMFS repository.
	Mount(ctx context.Context, in *MountSingleRequest, opts ...grpc.CallOption) (*MountSingleResponse, error)
	// Unmount a single CVMFS repository.
	Unmount(ctx context.Context, in *UnmountSingleRequest, opts ...grpc.CallOption) (*UnmountSingleResponse, error)
}

type singleClient struct {
	cc grpc.ClientConnInterface
}

func NewSingleClient(cc grpc.ClientConnInterface) SingleClient {
	return &singleClient{cc}
}

func (c *singleClient) Mount(ctx context.Context, in *MountSingleRequest, opts ...grpc.CallOption) (*MountSingleResponse, error) {
	out := new(MountSingleResponse)
	err := c.cc.Invoke(ctx, "/cvmfs.csi.cern.ch.v1.Single/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleClient) Unmount(ctx context.Context, in *UnmountSingleRequest, opts ...grpc.CallOption) (*UnmountSingleResponse, error) {
	out := new(UnmountSingleResponse)
	err := c.cc.Invoke(ctx, "/cvmfs.csi.cern.ch.v1.Single/Unmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SingleServer is the server API for Single service.
// All implementations must embed UnimplementedSingleServer
// for forward compatibility
type SingleServer interface {
	// Mounts a single CVMFS repository.
	Mount(context.Context, *MountSingleRequest) (*MountSingleResponse, error)
	// Unmount a single CVMFS repository.
	Unmount(context.Context, *UnmountSingleRequest) (*UnmountSingleResponse, error)
	mustEmbedUnimplementedSingleServer()
}

// UnimplementedSingleServer must be embedded to have forward compatible implementations.
type UnimplementedSingleServer struct {
}

func (UnimplementedSingleServer) Mount(context.Context, *MountSingleRequest) (*MountSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedSingleServer) Unmount(context.Context, *UnmountSingleRequest) (*UnmountSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedSingleServer) mustEmbedUnimplementedSingleServer() {}

// UnsafeSingleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SingleServer will
// result in compilation errors.
type UnsafeSingleServer interface {
	mustEmbedUnimplementedSingleServer()
}

func RegisterSingleServer(s grpc.ServiceRegistrar, srv SingleServer) {
	s.RegisterService(&Single_ServiceDesc, srv)
}

func _Single_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingleServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvmfs.csi.cern.ch.v1.Single/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingleServer).Mount(ctx, req.(*MountSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Single_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingleServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvmfs.csi.cern.ch.v1.Single/Unmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingleServer).Unmount(ctx, req.(*UnmountSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Single_ServiceDesc is the grpc.ServiceDesc for Single service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Single_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cvmfs.csi.cern.ch.v1.Single",
	HandlerType: (*SingleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mount",
			Handler:    _Single_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _Single_Unmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}
